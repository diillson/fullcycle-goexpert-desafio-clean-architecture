package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.66

import (
	"context"
	"strconv"
)

// CreateOrder is the resolver for the createOrder field.
func (r *mutationResolver) CreateOrder(ctx context.Context, input CreateOrderInput) (*Order, error) {
	query := `INSERT INTO orders (customer_id, amount, status) VALUES ($1, $2, $3) RETURNING id, created_at`
	var id int64
	var createdAt string
	err := r.db.QueryRow(query, input.CustomerID, input.Amount, input.Status).Scan(&id, &createdAt)
	if err != nil {
		return nil, err
	}

	return &Order{
		ID:         strconv.FormatInt(id, 10),
		CustomerID: input.CustomerID,
		Amount:     input.Amount,
		Status:     input.Status,
		CreatedAt:  createdAt,
	}, nil
}

// ListOrders is the resolver for the listOrders field.
func (r *queryResolver) ListOrders(ctx context.Context) ([]*Order, error) {
	rows, err := r.db.Query("SELECT id, customer_id, amount, status, created_at FROM orders")
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var orders []*Order
	for rows.Next() {
		var id int64
		order := &Order{}
		if err := rows.Scan(&id, &order.CustomerID, &order.Amount, &order.Status, &order.CreatedAt); err != nil {
			return nil, err
		}
		order.ID = strconv.FormatInt(id, 10)
		orders = append(orders, order)
	}

	return orders, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
